"use strict";
var core_1 = require("@angular/core");
var config_1 = require("../config");
var Sqlite = require("nativescript-sqlite");
var RoleDao = (function () {
    function RoleDao() {
        var _this = this;
        if (!this.isInstantiated) {
            (new Sqlite(config_1.Config.databaseName)).then(function (db) {
                db.execSQL("CREATE TABLE IF NOT EXISTS role (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT)\n                ").then(function (id) {
                    _this.database = db;
                    _this.isInstantiated = true;
                }, function (error) {
                    console.log("CREATE TABLE ERROR", error);
                });
            }, function (error) {
                console.log("OPEN DB ERROR", error);
            });
        }
    }
    RoleDao.prototype.insert = function (role) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.database.execSQL("INSERT INTO role (name) VALUES (?)", [role.name])
                .then(function (id) {
                console.log("INSERT RESULT", id);
                resolve(_this.fetchRoleById(id));
            }, function (error) {
                console.log("INSERT ERROR", error);
                reject(null);
            });
        });
    };
    RoleDao.prototype.fetchRoleById = function (id) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.database.all("SELECT * FROM role where id = ?", [id]).then(function (rows) {
                var roles = [];
                for (var row in rows) {
                    roles.push({
                        "id": rows[row][0],
                        "name": rows[row][1]
                    });
                }
                resolve(roles);
            }, function (error) {
                reject(error);
            });
        });
    };
    return RoleDao;
}());
RoleDao = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [])
], RoleDao);
exports.RoleDao = RoleDao;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sZS5kYW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyb2xlLmRhby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0Esc0NBQTJDO0FBRTNDLG9DQUFtQztBQUVuQyxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUc1QyxJQUFhLE9BQU87SUFLaEI7UUFBQSxpQkFjQztRQWJHLEVBQUUsQ0FBQSxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7WUFDdEIsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxlQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxFQUFFO2dCQUNyQyxFQUFFLENBQUMsT0FBTyxDQUFDLHFHQUNWLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxFQUFFO29CQUNOLEtBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO29CQUNuQixLQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztnQkFDL0IsQ0FBQyxFQUFFLFVBQUEsS0FBSztvQkFDSixPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUM3QyxDQUFDLENBQUMsQ0FBQztZQUNQLENBQUMsRUFBRSxVQUFBLEtBQUs7Z0JBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDeEMsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDO0lBQ0wsQ0FBQztJQUVNLHdCQUFNLEdBQWIsVUFBYyxJQUFVO1FBQXhCLGlCQVlDO1FBWEcsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU07WUFDL0IsS0FBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsb0NBQW9DLEVBQ3RDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUMvQixJQUFJLENBQUMsVUFBQSxFQUFFO2dCQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUNqQyxPQUFPLENBQUMsS0FBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3BDLENBQUMsRUFBRSxVQUFBLEtBQUs7Z0JBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQ25DLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUNoQixDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLCtCQUFhLEdBQXBCLFVBQXFCLEVBQU87UUFBNUIsaUJBZUM7UUFkRyxNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtZQUNuQyxLQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxpQ0FBaUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsSUFBSTtnQkFDaEUsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFBO2dCQUNWLEdBQUcsQ0FBQSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ2xCLEtBQUssQ0FBQyxJQUFJLENBQUM7d0JBQ1AsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ2xCLE1BQU0sRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO3FCQUN2QixDQUFDLENBQUM7Z0JBQ1AsQ0FBQztnQkFDRCxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbkIsQ0FBQyxFQUFFLFVBQUEsS0FBSztnQkFDSixNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbEIsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFDTCxjQUFDO0FBQUQsQ0FBQyxBQW5ERCxJQW1EQztBQW5EWSxPQUFPO0lBRG5CLGlCQUFVLEVBQUU7O0dBQ0EsT0FBTyxDQW1EbkI7QUFuRFksMEJBQU8iLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgUm9sZSB9IGZyb20gXCIuLi9kb21haW4vcm9sZVwiO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4uL2NvbmZpZ1wiO1xuXG52YXIgU3FsaXRlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1zcWxpdGVcIik7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBSb2xlRGFvIHtcblxuICAgIHByaXZhdGUgZGF0YWJhc2U6IGFueTtcbiAgICBwcml2YXRlIGlzSW5zdGFudGlhdGVkOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGlmKCF0aGlzLmlzSW5zdGFudGlhdGVkKSB7XG4gICAgICAgICAgICAobmV3IFNxbGl0ZShDb25maWcuZGF0YWJhc2VOYW1lKSkudGhlbihkYiA9PiB7XG4gICAgICAgICAgICAgICAgZGIuZXhlY1NRTChgQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgcm9sZSAoaWQgSU5URUdFUiBQUklNQVJZIEtFWSBBVVRPSU5DUkVNRU5ULCBuYW1lIFRFWFQpXG4gICAgICAgICAgICAgICAgYCkudGhlbihpZCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YWJhc2UgPSBkYjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0luc3RhbnRpYXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSwgZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNSRUFURSBUQUJMRSBFUlJPUlwiLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJPUEVOIERCIEVSUk9SXCIsIGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGluc2VydChyb2xlOiBSb2xlKTogUHJvbWlzZTxSb2xlPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRhdGFiYXNlLmV4ZWNTUUwoYElOU0VSVCBJTlRPIHJvbGUgKG5hbWUpIFZBTFVFUyAoPylgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbcm9sZS5uYW1lXSlcbiAgICAgICAgICAgIC50aGVuKGlkID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIklOU0VSVCBSRVNVTFRcIiwgaWQpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUodGhpcy5mZXRjaFJvbGVCeUlkKGlkKSk7XG4gICAgICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJJTlNFUlQgRVJST1JcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIHJlamVjdChudWxsKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBmZXRjaFJvbGVCeUlkKGlkOiBhbnkpOiBQcm9taXNlPFJvbGU+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgdGhpcy5kYXRhYmFzZS5hbGwoXCJTRUxFQ1QgKiBGUk9NIHJvbGUgd2hlcmUgaWQgPSA/XCIsIFtpZF0pLnRoZW4ocm93cyA9PiB7XG4gICAgICAgICAgICBsZXQgcm9sZXMgPSBbXVxuICAgICAgICAgICAgICAgIGZvcih2YXIgcm93IGluIHJvd3MpIHtcbiAgICAgICAgICAgICAgICAgICAgcm9sZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IHJvd3Nbcm93XVswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiByb3dzW3Jvd11bMV1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc29sdmUocm9sZXMpO1xuICAgICAgICAgICAgfSwgZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufSJdfQ==