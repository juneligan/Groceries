"use strict";
var core_1 = require("@angular/core");
var config_1 = require("../config");
var Sqlite = require("nativescript-sqlite");
var ProductDao = (function () {
    function ProductDao() {
        var _this = this;
        if (!this.isInstantiated) {
            (new Sqlite(config_1.Config.databaseName)).then(function (db) {
                db.execSQL("CREATE TABLE IF NOT EXISTS product (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT,\n                            unitPrice TEXT, sellPrice TEXT)\n                ").then(function (id) {
                    _this.database = db;
                    _this.isInstantiated = true;
                }, function (error) {
                    console.log("CREATE TABLE ERROR", error);
                });
            }, function (error) {
                console.log("OPEN DB ERROR", error);
            });
        }
    }
    return ProductDao;
}());
ProductDao = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [])
], ProductDao);
exports.ProductDao = ProductDao;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC5kYW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwcm9kdWN0LmRhby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0Esc0NBQTJDO0FBRTNDLG9DQUFtQztBQUVuQyxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUc1QyxJQUFhLFVBQVU7SUFLbkI7UUFBQSxpQkFlQztRQWRHLEVBQUUsQ0FBQSxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7WUFDdEIsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxlQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxFQUFFO2dCQUNyQyxFQUFFLENBQUMsT0FBTyxDQUFDLHFLQUVWLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxFQUFFO29CQUNOLEtBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO29CQUNuQixLQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztnQkFDL0IsQ0FBQyxFQUFFLFVBQUEsS0FBSztvQkFDSixPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUM3QyxDQUFDLENBQUMsQ0FBQztZQUNQLENBQUMsRUFBRSxVQUFBLEtBQUs7Z0JBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDeEMsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDO0lBQ0wsQ0FBQztJQThGTCxpQkFBQztBQUFELENBQUMsQUFsSEQsSUFrSEM7QUFsSFksVUFBVTtJQUR0QixpQkFBVSxFQUFFOztHQUNBLFVBQVUsQ0FrSHRCO0FBbEhZLGdDQUFVIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFByb2R1Y3QgfSBmcm9tIFwiLi4vZG9tYWluL3Byb2R1Y3RcIjtcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gXCIuLi9jb25maWdcIjtcblxudmFyIFNxbGl0ZSA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtc3FsaXRlXCIpO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUHJvZHVjdERhbyB7XG5cbiAgICBwcml2YXRlIGRhdGFiYXNlOiBhbnk7XG4gICAgcHJpdmF0ZSBpc0luc3RhbnRpYXRlZDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBpZighdGhpcy5pc0luc3RhbnRpYXRlZCkge1xuICAgICAgICAgICAgKG5ldyBTcWxpdGUoQ29uZmlnLmRhdGFiYXNlTmFtZSkpLnRoZW4oZGIgPT4ge1xuICAgICAgICAgICAgICAgIGRiLmV4ZWNTUUwoYENSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIHByb2R1Y3QgKGlkIElOVEVHRVIgUFJJTUFSWSBLRVkgQVVUT0lOQ1JFTUVOVCwgbmFtZSBURVhULFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXRQcmljZSBURVhULCBzZWxsUHJpY2UgVEVYVClcbiAgICAgICAgICAgICAgICBgKS50aGVuKGlkID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhYmFzZSA9IGRiO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzSW5zdGFudGlhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ1JFQVRFIFRBQkxFIEVSUk9SXCIsIGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIk9QRU4gREIgRVJST1JcIiwgZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8vIHB1YmxpYyBpbnNlcnQocHJvZHVjdDogUHJvZHVjdCk6IFByb21pc2U8UHJvZHVjdD4ge1xuICAgIC8vICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIC8vICAgICAgICAgdGhpcy5kYXRhYmFzZS5leGVjU1FMKGBJTlNFUlQgSU5UTyB1c2VyICh1c2VybmFtZSwgZW1haWxBZGRyZXNzLCBwYXNzd29yZCwgZmlyc3RuYW1lLCBsYXN0bmFtZSkgVkFMVUVTICg/LCA/LCA/LCA/LCA/KWAsXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtwcm9kdWN0LnVzZXJuYW1lLCB1c2VyLmVtYWlsQWRkcmVzcywgdXNlci5wYXNzd29yZCwgdXNlci5maXJzdG5hbWUsIHVzZXIubGFzdG5hbWVdKVxuICAgIC8vICAgICAgICAgLnRoZW4oaWQgPT4ge1xuICAgIC8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiSU5TRVJUIFJFU1VMVFwiLCBpZCk7XG4gICAgLy8gICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLmZldGNoVXNlckJ5SWQoaWQpKTtcbiAgICAvLyAgICAgICAgIH0sIGVycm9yID0+IHtcbiAgICAvLyAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIklOU0VSVCBFUlJPUlwiLCBlcnJvcik7XG4gICAgLy8gICAgICAgICB9KTtcbiAgICAvLyAgICAgfSk7XG4gICAgLy8gfVxuXG4gICAgLy8gcHVibGljIGZldGNoVXNlckJ5SWQoaWQ6IGFueSk6IFByb21pc2U8VXNlcj4ge1xuICAgIC8vICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIC8vICAgICB0aGlzLmRhdGFiYXNlLmFsbChcIlNFTEVDVCAqIEZST00gdXNlciB3aGVyZSBpZCA9ID9cIiwgW2lkXSkudGhlbihyb3dzID0+IHtcbiAgICAvLyAgICAgICAgICAgICBsZXQgdXNlcnMgPSBbXTtcbiAgICAvLyAgICAgICAgICAgICBmb3IodmFyIHJvdyBpbiByb3dzKSB7XG4gICAgLy8gICAgICAgICAgICAgICAgIHVzZXJzLnB1c2goe1xuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiByb3dzW3Jvd11bMF0sXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcImZpcnN0bmFtZVwiOiByb3dzW3Jvd11bMV0sXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcImxhc3RuYW1lXCI6IHJvd3Nbcm93XVsyXVxuICAgIC8vICAgICAgICAgICAgICAgICB9KTtcbiAgICAvLyAgICAgICAgICAgICB9XG4gICAgLy8gICAgICAgICAgICAgcmVzb2x2ZSh1c2Vycyk7XG4gICAgLy8gICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgLy8gICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAvLyAgICAgICAgIH0pO1xuICAgIC8vICAgICB9KTtcbiAgICAvLyB9XG5cblxuICAgIC8vIHB1YmxpYyBmZXRjaFVzZXJCeVVzZXJuYW1lT3JFbWFpbEFkZHJlc3ModXNlcjogVXNlcik6IFByb21pc2U8VXNlcj4ge1xuICAgIC8vICAgICBjb25zb2xlLmxvZyh1c2VyLmVtYWlsQWRkcmVzcyk7XG4gICAgLy8gICAgIGNvbnNvbGUubG9nKHVzZXIudXNlcm5hbWUpO1xuICAgIC8vICAgICBjb25zb2xlLmxvZyh1c2VyLnBhc3N3b3JkKTtcbiAgICAvLyAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAvLyAgICAgICAgIHRoaXMuZGF0YWJhc2UuYWxsKFwiU0VMRUNUIGlkLCBmaXJzdG5hbWUsIGxhc3RuYW1lLCB1c2VybmFtZSwgZW1haWxBZGRyZXNzIEZST00gdXNlciB3aGVyZSBlbWFpbEFkZHJlc3MgPSA/IE9SIHVzZXJuYW1lID0gP1wiLFxuICAgIC8vICAgICAgICAgW3VzZXIuZW1haWxBZGRyZXNzLCB1c2VyLnVzZXJuYW1lXSkudGhlbihyb3dzID0+IHtcbiAgICAvLyAgICAgICAgICBsZXQgdXNlcnMgPSBbXTtcbiAgICAvLyAgICAgICAgICAgICBmb3IodmFyIHJvdyBpbiByb3dzKSB7XG4gICAgLy8gICAgICAgICAgICAgICAgIHVzZXJzLnB1c2goe1xuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiByb3dzW3Jvd11bMF0sXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcImZpcnN0bmFtZVwiOiByb3dzW3Jvd11bMV0sXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcImxhc3RuYW1lXCI6IHJvd3Nbcm93XVsyXSxcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwidXNlcm5hbWVcIjogcm93c1tyb3ddWzNdLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJlbWFpbEFkZHJlc3NcIjogcm93c1tyb3ddWzRdXG4gICAgLy8gICAgICAgICAgICAgICAgIH0pO1xuICAgIC8vICAgICAgICAgICAgIH1cbiAgICAvLyAgICAgICAgICAgICByZXNvbHZlKHVzZXJzKTtcbiAgICAvLyAgICAgICAgIH0sIGVycm9yID0+IHtcbiAgICAvLyAgICAgICAgICAgICByZWplY3QobnVsbCk7XG4gICAgLy8gICAgICAgICB9KTtcbiAgICAvLyAgICAgfSk7XG4gICAgLy8gfVxuXG4gICAgLy8gcHVibGljIGZldGNoVXNlcih1c2VyOiBVc2VyKTogUHJvbWlzZTxVc2VyPiB7XG4gICAgLy8gICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgLy8gICAgICAgICB0aGlzLmRhdGFiYXNlLmFsbChcIlNFTEVDVCBpZCwgZmlyc3RuYW1lLCBsYXN0bmFtZSwgdXNlcm5hbWUsIGVtYWlsQWRkcmVzcyBGUk9NIHVzZXIgd2hlcmUgKGVtYWlsQWRkcmVzcyA9ID8pIEFORCBwYXNzd29yZCA9ID9cIixcbiAgICAvLyAgICAgICAgIFt1c2VyLmVtYWlsQWRkcmVzcywgdXNlci5wYXNzd29yZF0pLnRoZW4ocm93cyA9PiB7XG4gICAgLy8gICAgICAgICAgbGV0IHVzZXJzID0gW107XG4gICAgLy8gICAgICAgICAgICAgZm9yKHZhciByb3cgaW4gcm93cykge1xuICAgIC8vICAgICAgICAgICAgICAgICB1c2Vycy5wdXNoKHtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogcm93c1tyb3ddWzBdLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJmaXJzdG5hbWVcIjogcm93c1tyb3ddWzFdLFxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgXCJsYXN0bmFtZVwiOiByb3dzW3Jvd11bMl0sXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBcInVzZXJuYW1lXCI6IHJvd3Nbcm93XVszXSxcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIFwiZW1haWxBZGRyZXNzXCI6IHJvd3Nbcm93XVs0XVxuICAgIC8vICAgICAgICAgICAgICAgICB9KTtcbiAgICAvLyAgICAgICAgICAgICB9XG4gICAgLy8gICAgICAgICAgICAgcmVzb2x2ZSh1c2Vycyk7XG4gICAgLy8gICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgLy8gICAgICAgICAgICAgcmVqZWN0KG51bGwpO1xuICAgIC8vICAgICAgICAgfSk7XG4gICAgLy8gICAgIH0pO1xuICAgIC8vIH1cblxuICAgIC8vIHB1YmxpYyBmZXRjaEFsbCgpIHtcbiAgICAvLyB2YXIgdXNlcnMgPSBbXTtcbiAgICAvLyAgICAgdGhpcy5kYXRhYmFzZS5hbGwoXCJTRUxFQ1QgKiBGUk9NIHVzZXJcIikudGhlbihyb3dzID0+IHtcbiAgICAvLyAgICAgICAgIGZvcih2YXIgcm93IGluIHJvd3MpIHtcbiAgICAvLyAgICAgICAgICAgICB1c2Vycy5wdXNoKHtcbiAgICAvLyAgICAgICAgICAgICAgICAgXCJmaXJzdG5hbWVcIjogcm93c1tyb3ddWzFdLFxuICAgIC8vICAgICAgICAgICAgICAgICBcImxhc3RuYW1lXCI6IHJvd3Nbcm93XVsyXVxuICAgIC8vICAgICAgICAgICAgIH0pO1xuICAgIC8vICAgICAgICAgfVxuICAgIC8vICAgICB9LCBlcnJvciA9PiB7XG4gICAgLy8gICAgICAgICBjb25zb2xlLmxvZyhcIlNFTEVDVCBFUlJPUlwiLCBlcnJvcik7XG4gICAgLy8gICAgIH0pO1xuICAgIC8vIH1cblxufSJdfQ==