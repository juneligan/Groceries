"use strict";
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var Rx_1 = require("rxjs/Rx");
require("rxjs/add/operator/do");
require("rxjs/add/operator/map");
var config_1 = require("../config");
var Sqlite = require("nativescript-sqlite");
var UserService = (function () {
    function UserService(http) {
        var _this = this;
        this.http = http;
        (new Sqlite("my.db")).then(function (db) {
            db.execSQL("CREATE TABLE IF NOT EXISTS user (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT,\n                      emailAddress TEXT, password TEXT, firstname TEXT, lastname TEXT)\n        ").then(function (id) {
                _this.database = db;
            }, function (error) {
                console.log("CREATE TABLE ERROR", error);
            });
        }, function (error) {
            console.log("OPEN DB ERROR", error);
        });
    }
    UserService.prototype.insert = function () {
        var _this = this;
        this.database.execSQL("NSERT INTO user (username, emailAddress, password, firstname, lastname) VALUES (?, ?, ?, ?, ?)", ["username", "emailAddress", "password", "Nic", "Raboy"])
            .then(function (id) {
            console.log("INSERT RESULT", id);
            _this.fetch();
        }, function (error) {
            console.log("INSERT ERROR", error);
        });
    };
    UserService.prototype.fetch = function () {
        var users = [];
        this.database.all("SELECT * FROM people").then(function (rows) {
            for (var row in rows) {
                users.push({
                    "firstname": rows[row][1],
                    "lastname": rows[row][2]
                });
                console.log("-------------");
                console.log(rows[row][1]);
                console.log(rows[row][2]);
                console.log("-------------");
            }
        }, function (error) {
            console.log("SELECT ERROR", error);
        });
    };
    UserService.prototype.test = function (user) {
        this.database.createDocument(user);
    };
    UserService.prototype.test2 = function () {
    };
    UserService.prototype.test3 = function () {
    };
    UserService.prototype.register = function (user) {
        var headers = new http_1.Headers();
        headers.append("Content-Type", "application/json");
        return this.http.post(config_1.Config.apiUrl + "Users", JSON.stringify({
            Username: user.email,
            Email: user.email,
            Password: user.password
        }), { headers: headers })
            .catch(this.handleErrors);
        // this.database.createDocument(user);
    };
    UserService.prototype.handleErrors = function (error) {
        console.log(JSON.stringify(error.json()));
        return Rx_1.Observable.throw(error);
    };
    UserService.prototype.login = function (user) {
        var headers = new http_1.Headers();
        headers.append("Content-Type", "application/json");
        return this.http.post(config_1.Config.apiUrl + "oauth/token", JSON.stringify({
            username: user.email,
            password: user.password,
            grant_type: "password"
        }), { headers: headers })
            .map(function (response) { return response.json(); })
            .do(function (data) {
            config_1.Config.token = data.Result.access_token;
        })
            .catch(this.handleErrors);
    };
    return UserService;
}());
UserService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http])
], UserService);
exports.UserService = UserService;
//# sourceMappingURL=data:application/json;base64,