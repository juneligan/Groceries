"use strict";
var core_1 = require("@angular/core");
var Sqlite = require("nativescript-sqlite");
var UserDao = (function () {
    function UserDao() {
        var _this = this;
        if (!this.isInstantiated) {
            (new Sqlite("Groceries.db")).then(function (db) {
                db.execSQL("CREATE TABLE IF NOT EXISTS user (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT,\n                            emailAddress TEXT, password TEXT, firstname TEXT, lastname TEXT)\n                ").then(function (id) {
                    _this.database = db;
                    _this.isInstantiated = true;
                }, function (error) {
                    console.log("CREATE TABLE ERROR", error);
                });
            }, function (error) {
                console.log("OPEN DB ERROR", error);
            });
        }
    }
    UserDao.prototype.insert = function (user) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.database.execSQL("INSERT INTO user (username, emailAddress, password, firstname, lastname) VALUES (?, ?, ?, ?, ?)", [user.username, user.emailAddress, user.password, user.firstname, user.lastname])
                .then(function (id) {
                console.log("INSERT RESULT", id);
                resolve(_this.fetchUserById(id));
            }, function (error) {
                console.log("INSERT ERROR", error);
            });
        });
    };
    UserDao.prototype.fetchUserById = function (id) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.database.all("SELECT * FROM user where id = ?", [id]).then(function (rows) {
                var users = [];
                for (var row in rows) {
                    users.push({
                        "id": rows[row][0],
                        "firstname": rows[row][1],
                        "lastname": rows[row][2]
                    });
                }
                resolve(users);
            }, function (error) {
                reject(error);
            });
        });
    };
    UserDao.prototype.fetchUserByUsernameOrEmailAddress = function (user) {
        var _this = this;
        console.log(user.emailAddress);
        console.log(user.username);
        console.log(user.password);
        return new Promise(function (resolve, reject) {
            _this.database.all("SELECT id, firstname, lastname, username, emailAddress FROM user where emailAddress = ? OR username = ?", [user.emailAddress, user.username]).then(function (rows) {
                var users = [];
                for (var row in rows) {
                    users.push({
                        "id": rows[row][0],
                        "firstname": rows[row][1],
                        "lastname": rows[row][2],
                        "username": rows[row][3],
                        "emailAddress": rows[row][4]
                    });
                }
                resolve(users);
            }, function (error) {
                reject(null);
            });
        });
    };
    UserDao.prototype.fetchUser = function (user) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.database.all("SELECT id, firstname, lastname, username, emailAddress FROM user where (emailAddress = ?) AND password = ?", [user.emailAddress, user.password]).then(function (rows) {
                var users = [];
                for (var row in rows) {
                    users.push({
                        "id": rows[row][0],
                        "firstname": rows[row][1],
                        "lastname": rows[row][2],
                        "username": rows[row][3],
                        "emailAddress": rows[row][4]
                    });
                }
                resolve(users);
            }, function (error) {
                console.dump(error);
                reject(null);
            });
        });
    };
    UserDao.prototype.fetchAll = function () {
        var users = [];
        this.database.all("SELECT * FROM user").then(function (rows) {
            for (var row in rows) {
                users.push({
                    "firstname": rows[row][1],
                    "lastname": rows[row][2]
                });
            }
        }, function (error) {
            console.log("SELECT ERROR", error);
        });
    };
    return UserDao;
}());
UserDao = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [])
], UserDao);
exports.UserDao = UserDao;
//# sourceMappingURL=data:application/json;base64,